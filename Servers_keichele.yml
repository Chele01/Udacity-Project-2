Description: >
    Carlos Rivas / Udacity
    
Parameters:
   
  EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
Resources:
    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our load balancer
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our hosts and SSH from local only
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 8080
            ToPort: 8080
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0 
          SecurityGroupEgress: 
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0 
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              apt-get update -y
              apt-get install unzip awscli -y
              apt-get install apache2 -y
              systemctl start apache2.service
              cd /var/www/html
              aws s3 cp s3://udacity-demo-1/udacity.zip .
              unzip -o udacity.zip
          ImageId: ami-005bdb005fb00e791
          IamInstanceProfile: !Ref ProfileWithRolesForOurApp
          SecurityGroups:
          - Ref: WebServerSecGroup
          InstanceType: t3.small
          BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: '10'
              WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
        VPCZoneIdentifier:
        - Fn::Importvalue:
            !Sub "{EnvironmentName}-PRIV-NETS"
        LaunchConfigurationName:    
          Ref: WebAppLaunchConfig
        MinSize: "3"  
        MaxSize: "5"
        TargetGroupARNs:
        - Ref: WebAppTargetGroup
    WebAppGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier:
        - Fn::Importvalue:
            !Sub "{EnvironmentName}-PRIV-NETS"
        LaunchConfigurationName:    
          Ref: WebAppLaunchConfig
        MinSize: "3"  
        MaxSize: "5"

        ListS3BucketsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: ListS3BucketsPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:List*
          Resource: "*"
      Roles:
      - Ref: ListS3BucketsRole
    ListS3BucketsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
Outputs:
  VPC:
    Description: AWS VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  PrivateSub1:
    Description: Private Subnet 1
    Value: !Ref PrivateSubnet1CIDR
    Export:
      Name: !Sub "${AWS::StackName}-PRIVSUBNET1"
  PrivateSub2:
    Description: Private Subnet 2
    Value: !Ref PrivateSubnet2CIDR
    Export:
      Name: !Sub "${AWS::StackName}-PRIVSUBNET2"
  PublicSub1:
    Description: Public Subnet 1
    Value: !Ref PublicSubnet1CIDR
    Export:
      Name: !Sub "${AWS::StackName}-PUBSUBNET1"
  PublicSub2:
    Description: Public Subnet 2
    Value: !Ref PublicSubnet2CIDR
    Export:
      Name: !Sub "${AWS::StackName}-PUBSUBNET2"
  StackIGW:
    Description: Stack IGW ID
    Value: !Ref InternetGateway
    Export:
      Name: !Sub "${AWS::StackName}-IGW"
  BastionIP:
    Description: Bastion Public IP
    Value: !GetAtt BastionNode.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-bastion-public-ip"
  BastionDNS:
    Description: Bastion DNS
    Value: !GetAtt BastionNode.PublicDnsName
    Export:
      Name: !Sub "${AWS::StackName}-bastion-public-dns"
  LoadBalancerDNS:
    Description: LoadBalancer DNS
    Value: !Join [ "", [ "http://", !GetAtt LoadBalancer.DNSName ] ]
    Export:
      Name: !Sub "${AWS::StackName}-lb-dns"


        

    