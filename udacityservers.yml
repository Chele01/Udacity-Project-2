Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

Resources:

ListS3BucketsRole:
    Type: AWS::IAM::Role
    Properties: 
        AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
                - Effect: Allow
                  Principal:
                    Service:
                    - ec2.amazonaws.com
                  Action:
                  - sts:AssumeRole
        Path: "/"
ListS3BucketsPolicy:
    Type: AWS::IAM::Policy
    Properties:
        PolicyName: ListS3BucketsPolicy
        PolicyDocument:
            Statement:
                - Effect: Allow
                  Action:
                  - s3:List*
                  Resource: "*"
        Roles:
        - Ref: ListS3BucketsRole

ListS3BucketsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
        Path: "/"
        Roles:
        - Ref: ListS3BucketsRole

LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
WebServerSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our hosts and SSH from local only
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 
        SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0 
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              apt-get update -y
              apt-get install unzip awscli -y
              apt-get install apache2 -y
              systemctl start apache2.service
              cd /var/www/html
              aws s3 cp s3://udacity-demo-1/udacity.zip .
              unzip -o udacity.zip
          ImageId: ami-005bdb005fb00e791
          IamInstanceProfile: !Ref ProfileWithRolesForOurApp
          SecurityGroups:
          - Ref: WebServerSecGroup
          InstanceType: t3.small
          -DeviceName: "/dev/sdk"
          VolumeSize: '10'
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
          - Fn::Importvalue:
          !Sub "{EnvironmentName}-PRIV-NETS"
          LaunchConfigurationName:         
      Ref: WebAppLaunchConfig             
          MinSize: "3"  
          MaxSize: "5"

WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 35
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
          LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebServerTargetGroup
  WebServerTargetGroup:
     Type: AWS::ElasticLoadBalancingV2::TargetGroup
     Properties:
      TargetType: instance
      Tags:
         - Key: Name
           Value: !Sub ${EnvironmentName}-web-server-tg
      HealthCheckIntervalSeconds: 35
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref 'VPC'
  Bastion
  BastionNode:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 24
            VolumeType: gp2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-bastion
      ImageId: ami-0bbc25e23a7640b9b
      InstanceType: t2.micro
      SubnetId:
        Ref: PublicSub1
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      SecurityGroupIds:
        - Ref: SecurityGroupBastion
 Web Servers Auto Scaling + Launch Config
  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: 100
      TargetGroupARNs:
        - !Ref WebServerTargetGroup
      VPCZoneIdentifier:
        - Ref: "PrivateSub1"
        - Ref: "PrivateSub2"
      LaunchConfigurationName:
        Ref: "WebServerLaunchConfig"
      MinSize: "4"
      MaxSize: "4"
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - "GroupMinSize"
            - "GroupMaxSize"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-web-server-asg
          PropagateAtLaunch: "true"
  WebServerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            apt-get -y  update
            apt-get -y install unzip awscli
            apt-get -y install apache2
            systemctl start apache2
            cd /var/www/html
            aws s3 cp s3://udacity-deploy-iac-project-2/code.tgz .
            tar -xzvf code.tgz
            chown -R www-data:www-data .
      ImageId: ami-01e6a0b85de033c99
      IamInstanceProfile:
        Ref: ListS3BucketsInstanceProfile
      SecurityGroups:
        - Ref: SecurityGroupWeb
      InstanceType: t2.micro
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 24
            VolumeType: gp2
           EC2 Instance bucket policy
  ListS3BucketsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: ListS3BucketsRole
      Outputs:
  VPC:
    Description: AWS VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  PrivateSub1:
    Description: Private Subnet 1
    Value: !Ref PrivateSubnet1CIDR
    Export:
      Name: !Sub "${AWS::StackName}-PRIVSUBNET1"
  PrivateSub2:
    Description: Private Subnet 2
    Value: !Ref PrivateSubnet2CIDR
    Export:
      Name: !Sub "${AWS::StackName}-PRIVSUBNET2"
  PublicSub1:
    Description: Public Subnet 1
    Value: !Ref PublicSubnet1CIDR
    Export:
      Name: !Sub "${AWS::StackName}-PUBSUBNET1"
  PublicSub2:
    Description: Public Subnet 2
    Value: !Ref PublicSubnet2CIDR
    Export:
      Name: !Sub "${AWS::StackName}-PUBSUBNET2"
  StackIGW:
    Description: Stack IGW ID
    Value: !Ref InternetGateway
    Export:
      Name: !Sub "${AWS::StackName}-IGW"
  BastionIP:
    Description: Bastion Public IP
    Value: !GetAtt BastionNode.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-bastion-public-ip"
  BastionDNS:
    Description: Bastion DNS
    Value: !GetAtt BastionNode.PublicDnsName
    Export:
      Name: !Sub "${AWS::StackName}-bastion-public-dns"
  LoadBalancerDNS:
    Description: LoadBalancer DNS
    Value: !Join [ "", [ "http://", !GetAtt LoadBalancer.DNSName ] ]
    Export:
      Name: !Sub "${AWS::StackName}-lb-dns"


        

             